#ifndef ELFPATCHER_ASM_H
#define ELFPATCHER_ASM_H

#define INSTR_MASK  0b11111100000000000000000000000000
#define B_LL_MASK   0b00000011111111111111111111111100
#define B_AA        0b00000000000000000000000000000010
#define B_LK        0b00000000000000000000000000000001
#define BITS_BRANCH 0b01001000000000000000000000000000
#define R0 0x0
#define R1 0x1
#define R2 0x2
#define R3 0x3
#define R4 0x4
#define R5 0x5
#define R6 0x6
#define R7 0x7
#define R8 0x8
#define R9 0x9
#define R10 0xa
#define R11 0xb
#define R12 0xc
#define R13 0xd
#define R14 0xe

#define SP R1

#define PPC_BRANCH(LL, AA, LK) ((uint32_t)(BITS_BRANCH | ((LL) & B_LL_MASK) | ((AA) ? B_AA : 0) | ((LK) ? B_LK : 0)))

#define PPC_BLR 0x4E800020
#define PPC_MFLR_R0 0x7C0802A6
#define PPC_MTLR_R0 0x7C0803A6

#define PPC_STW_MASK           0b10010000000000000000000000000000
#define PPC_STW(RS, RA, D)    (0b10010000000000000000000000000000 | (RS)<<21 | (RA)<<16 | ((D) & 0xFFFF))
#define PPC_STWU(RS, RA, D)   (0b10010100000000000000000000000000 | (RS)<<21 | (RA)<<16 | ((D) & 0xFFFF))
#define PPC_LWZ(RT, RA, D)    (0b10000000000000000000000000000000 | (RT)<<21 | (RA)<<16 | ((D) & 0xFFFF))
#define PPC_ADDI(RT, RA, SID) (0b00111000000000000000000000000000 | (RT)<<21 | (RA)<<16 | ((SID) & 0xFFFF))
#define PPC_ADDIS(RT, RA, SID)(0b00111100000000000000000000000000 | (RT)<<21 | (RA)<<16 | ((SID) & 0xFFFF))
#define PPC_ORI(RA, RS, UIMM) (0b01100000000000000000000000000000 | (RS)<<21 | (RA)<<16 | ((UIMM) & 0xFFFF))
#define PPC_OR(RA, RS, B)     (0b01111100000000000000000000000000 | (RS)<<21 | (RA)<<16 | (B)<<11 | 444<<1)

#define PPC_LI(D, SIMM) PPC_ADDI(D, 0, SIMM)
#define PPC_LIS(D, SIMM) PPC_ADDIS(D, 0, SIMM)
#define PPC_MR(A, S) PPC_OR(A, S, S)
#define PPC_B(LL) PPC_BRANCH(LL, 0, 0)
#define PPC_BA(LL) PPC_BRANCH(LL, 1, 0)
#define PPC_BL(LL) PPC_BRANCH(LL, 0, 1)
#define PPC_BLA(LL) PPC_BRANCH(LL, 1, 1)


#endif //ELFPATCHER_ASM_H
